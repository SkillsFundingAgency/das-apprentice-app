<script src="https://code.jquery.com/jquery-3.7.1.min.js"
    integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

<script type="text/javascript">
    $(document).ready(function () {

        const removeNotification = (taskId) => {
            console.log(taskId);
            $.ajax({
                type: "POST",
                url: '@Url.Action("DeleteNotification", "Notifications")',
                data: { taskId },
                complete: function () {
                    $('#notification-' + taskId).hide();
                    updateCounter();
                },
                dataType: "json"
            });
        }

        $('body').on('click', '.remove-notification', function (e) {
            const modalContent = {
                message: 'Are you sure you want to delete this notification?',
                confirmButton: 'Delete notification'
            }
            const taskId = $(this).data('notification-id');
            const modal = new Modal(this, removeNotification, taskId, modalContent).init();
        });

        $('body').on('click', '.remove-survey-notification', function (e) {
            setCookie("SFA.DAS.ApprenticeApp.SurveyNotificationSeen", "1", "999");
            location.reload();
        });        

        $('.app-js-convert-minutes-to-date').each(function () {
            const dueDateTime = new Date($(this).data('due'));
            const minutes = $(this).data('val');
            const reminderDate = new Date(dueDateTime.getTime() - minutes * 60 * 1000);
            const options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' };
            $(this).text(reminderDate.toLocaleString("en-GB", options));
        });


        function updateCounter() {

            const currentVal = parseInt($(".app-navigation__link-count").text());
            const newVal = currentVal - 1;
            if (newVal === 0) {
                $(".app-navigation__link-count").hide();
                $("#notification_content").load('@Url.Action("NoNotifications", "Notifications")')
            }
            else {
                $(".app-navigation__link-count").text(newVal);
            }
        }

        function setCookie(name, value, expDays) {
            let cookieString = name + "=" + value + "; path=/;SameSite=None";
            if (expDays) {
                let date = new Date();
                date.setTime(date.getTime() + expDays * 24 * 60 * 60 * 1000);
                cookieString = cookieString + "; expires=" + date.toGMTString();
            }
            cookieString = cookieString + "; Secure";
            cookieString + ";domain=" + getDomain();
            document.cookie = cookieString;
        }
        function getCookie(name) {
            var nameEQ = name + "=";
            var cookies = document.cookie.split(";");
            for (var i = 0, len = cookies.length; i < len; i++) {
                var cookie = cookies[i];
                while (cookie.charAt(0) === " ") {
                    cookie = cookie.substring(1, cookie.length);
                }
                if (cookie.indexOf(nameEQ) === 0) {
                    return decodeURIComponent(cookie.substring(nameEQ.length));
                }
            }
            return null;
        }

        function getDomain() {
            return window.location.hostname.indexOf(".") !== -1
                ? "." +
                window.location.hostname.slice(
                    window.location.hostname.indexOf(".") + 1,
                )
                : window.location.hostname;
        }



        appInit();
    })


    //pushnotification setup
    const checkUICompatibility = () => {
        if (!("serviceWorker" in navigator)) {
            console.log("Service worker not supported");
            throw new Error("Service worker not supported");
        }

        if (!("Notification" in window)) {
            console.log("Notification not supported");
            throw new Error("Notification not supported");
        }
    };

    const displayNotificationButtons = () => {
        const enableNotificationsButtons = document.querySelectorAll(
            ".enable-notifications"
        );

        for (const element of enableNotificationsButtons) {
            if (Notification.permission === "default") {
                element.classList.add("app-modal--visible");
            } else {
                element.classList.remove("app-modal--visible");
            }
        }
    };

    //step 1: check if the browser supports service workers and notifications
    checkUICompatibility();

    //step 2: manage ui elements based on existing permission status
    displayNotificationButtons();    
    
</script>
