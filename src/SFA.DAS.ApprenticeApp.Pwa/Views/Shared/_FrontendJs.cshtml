<script>
    // Tabs

    // Define a constructor function for the Tabs component.
    // Takes a container element as an argument, and initializes properties to store tabs and tab panels.
    function Tabs(container) {
        this.tabs = container.querySelectorAll(".app-tabs__tab");          // Select all elements within the container that have the class 'app-tabs__tab'.
        this.tabPanels = container.querySelectorAll(".app-tabs__panel");  // Select all elements within the container that have the class 'app-tabs__panel'.
    }

    // Add an initialization method to the Tabs prototype.
    // This method sets up the roles and event listeners necessary for the tabs to function.
    Tabs.prototype.init = function () {
        if (!this.tabs) { // If there are no tabs in the container, exit the function.
            return;
        }

        // Loop through each tab, set the 'role' attribute to 'tab', and attach a click event listener.
        this.tabs.forEach((tab) => {
            tab.setAttribute("role", "tab");
            tab.addEventListener("click", this.handleTabClick.bind(this));  // Bind the click event to the handleTabClick method, ensuring the correct context.
        });

        // Loop through each tab panel and set the 'role' attribute to 'tabpanel'.
        this.tabPanels.forEach((tab) => {
            tab.setAttribute("role", "tabpanel");
        });
    };

    // Define the method that handles the tab click event.
    // This method controls which tab panel is visible and updates the active tab state.
    Tabs.prototype.handleTabClick = function (event) {
        event.preventDefault(); // Prevent the default action when a tab is clicked (e.g., following a link).

        const tab = event.target; // Get the clicked tab.

        // Loop through all tab panels and hide them by setting their hidden property to true.
        this.tabPanels.forEach(function (panel) {
            panel.hidden = true;
        });

        // Loop through all tabs, set ariaSelected to false, and remove the selected class.
        this.tabs.forEach((tab) => {
            tab.ariaSelected = false;
            tab.parentElement.classList.remove("app-tabs__list-item--selected");
        });

        // Set ariaSelected to true for the clicked tab and add the selected class.
        tab.setAttribute("aria-selected", true);
        tab.parentElement.classList.add("app-tabs__list-item--selected");

        // Get the associated tab panel using the tab's hash (ID) and make it visible.
        const { hash } = tab;
        const panel = document.getElementById(hash.substring(1));
        panel.hidden = false;
    };

    // Select all elements on the page with the data-module attribute set to 'app-tabs'.
    // For each found element, create a new Tabs instance and initialize it.
    const appTabs = document.querySelectorAll(`[data-module="app-tabs"]`);

    if (appTabs) {
        appTabs.forEach(function (tabs) {
            new Tabs(tabs).init();
        });
    }

    // Overlays

    // Define a constructor function for the Overlay component.
    // Takes a link element as an argument and initializes properties for managing the overlay state.
    function Overlay(link) {
        this.link = link;
        this.bodyClassName = "app-template__body--overlay-open";          // Class name to add to the body when the overlay is open.
        this.showOverlayClassName = "app-overlay--visible";               // Class name to add to the overlay to make it visible.
    }

    // Add an initialization method to the Overlay prototype.
    // This method finds the overlay element and sets up the necessary event listeners.
    Overlay.prototype.init = function () {
        const target = this.link.hash; // Get the hash from the link, which corresponds to the ID of the overlay.
        this.overlay = document.getElementById(target.substring(1)); // Select the overlay element using the ID.

        if (!this.overlay) { // If the overlay element does not exist, exit the function.
            return;
        }

        this.setupEvents(); // Call a method to set up event listeners for showing and hiding the overlay.
    };

    // Define a method to set up event listeners for the overlay.
    // This method handles showing and hiding the overlay when the appropriate links are clicked.
    Overlay.prototype.setupEvents = function () {
        this.link.addEventListener("click", this.showOverlay.bind(this)); // Attach a click event listener to the link to show the overlay.

        const close = this.overlay.querySelector(".app-overlay-header__link"); // Find the close link within the overlay.
        close.addEventListener("click", this.hideOverlay.bind(this)); // Attach a click event listener to the close link to hide the overlay.
    };

    // Define the method that handles showing the overlay.
    // Adds the necessary classes to the body and overlay to make the overlay visible and focuses on the first input field.
    Overlay.prototype.showOverlay = function (event) {
        event.preventDefault(); // Prevent the default action when the link is clicked.

        document.body.classList.add(this.bodyClassName); // Add a class to the body to indicate the overlay is open.
        this.overlay.classList.add(this.showOverlayClassName); // Add a class to the overlay to make it visible.

        const firstInput = this.overlay.querySelector("input"); // Find the first input field within the overlay.
        if (firstInput) { // If an input field is found, focus on it.
            firstInput.focus();
        }
    };

    // Define the method that handles hiding the overlay.
    // Removes the classes that make the overlay visible and restore the body to its original state.
    Overlay.prototype.hideOverlay = function (event) {
        event.preventDefault(); // Prevent the default action when the close link is clicked.

        document.body.classList.remove(this.bodyClassName); // Remove the class from the body indicating the overlay is open.
        this.overlay.classList.remove(this.showOverlayClassName); // Remove the class from the overlay to hide it.
    };

    // Select all elements on the page with the data-module attribute set to 'app-overlay'.
    // For each found element, create a new Overlay instance and initialize it.
    const appOverlays = document.querySelectorAll(`[data-module="app-overlay"]`);

    if (appOverlays) {
        appOverlays.forEach(function (overlay) {
            new Overlay(overlay).init();
        });
    }

    // Dropdown Menus

    // Define a constructor function for the Dropdown component.
    // Takes a container element as an argument and initializes properties for managing the dropdown state.
    function Dropdown(container) {
        this.toggle = container.querySelector(".app-dropdown__toggle"); // Select the toggle button within the dropdown container.
        this.menu = container.querySelector(".app-dropdown__menu");     // Select the dropdown menu within the container.
        this.showMenuClassName = "app-dropdown__menu--visible";         // Class name to add to the menu to make it visible.
    }

    // Add an initialization method to the Dropdown prototype.
    // This method sets up the click event listener on the toggle button to handle showing and hiding the menu.
    Dropdown.prototype.init = function () {
        this.toggle.addEventListener("click", this.toggleMenu.bind(this)); // Attach a click event listener to the toggle button.
    };

    // Define the method that handles toggling the dropdown menu.
    // This method adds or removes the visible class based on the current state of the menu.
    Dropdown.prototype.toggleMenu = function () {
        if (this.menu.classList.contains(this.showMenuClassName)) { // If the menu is currently visible, hide it.
            this.menu.classList.remove(this.showMenuClassName);
        } else { // Otherwise, show the menu.
            this.menu.classList.add(this.showMenuClassName);
        }
    };

    // Select all elements on the page with the data-module attribute set to 'app-dropdown'.
    // For each found element, create a new Dropdown instance and initialize it.
    const appDropdowns = document.querySelectorAll(`[data-module="app-dropdown"]`);

    if (appDropdowns) {
        appDropdowns.forEach(function (dropdown) {
            new Dropdown(dropdown).init();
        });
    }
</script>
