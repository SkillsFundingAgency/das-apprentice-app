<script>
    // Tabs

    function Tabs(container) {
        this.tabs = container.querySelectorAll(".app-tabs__tab");
        this.showActiveTab = container.dataset.activetabstatus || false;
        this.tabPanels = container.querySelectorAll(".app-tabs__panel");
        delete container.dataset.module;
    }

    Tabs.prototype.init = function () {
        if (!this.tabs) {
            return;
        }
        this.tabs.forEach((tab) => {
            tab.setAttribute("role", "tab");
            tab.addEventListener("click", this.handleTabClick.bind(this));
        });
        this.tabPanels.forEach((tab) => {
            tab.setAttribute("role", "tabpanel");
        });

        const params = new URLSearchParams(window.location.search)
        if (this.showActiveTab && params.has(this.showActiveTab)) {
            this.tabs[params.get(this.showActiveTab)].click()
        } else {
            this.tabs[0].click()
        }
    };

    Tabs.prototype.handleTabClick = function (event) {
        event.preventDefault();
        const tab = event.target;
        this.tabPanels.forEach(function (panel) {
            panel.hidden = true;
        });
        this.tabs.forEach((tab) => {
            tab.ariaSelected = false;
            tab.parentElement.classList.remove("app-tabs__list-item--selected");
        });
        tab.setAttribute("aria-selected", true);
        tab.parentElement.classList.add("app-tabs__list-item--selected");
        const { hash } = tab;
        const panel = document.getElementById(hash.substring(1));
        if (panel) {
            panel.hidden = false;
        }
    };



    // Overlays

    function Overlay(link) {
        this.link = link;
        this.bodyClassName = "app-template__body--overlay-open";
        this.showOverlayClassName = "app-overlay--visible";
    }

    Overlay.prototype.init = function () {
        const target = this.link.hash;
        this.overlay = document.getElementById(target.substring(1));
        if (!this.overlay) {
            return;
        }
        this.setupEvents();
    };

    Overlay.prototype.setupEvents = function () {
        this.link.addEventListener("click", this.showOverlay.bind(this));
        const close = this.overlay.querySelector(".app-overlay-header__link");
        close.addEventListener("click", this.hideOverlay.bind(this));
    };

    Overlay.prototype.showOverlay = function (event) {
        event.preventDefault();
        document.body.classList.add(this.bodyClassName);
        this.overlay.classList.add(this.showOverlayClassName);
        document.addEventListener(`keydown`, (e) => initTrapFocus(e, this.overlay.id));

    };

    Overlay.prototype.hideOverlay = function (event) {
        event.preventDefault();
        document.removeEventListener(`keydown`, (e) => initTrapFocus(e, this.overlay.id));
        document.body.classList.remove(this.bodyClassName);
        this.overlay.classList.remove(this.showOverlayClassName);
    };


    // Dropdown Menus

    function Dropdown(container, appDropdowns) {
        this.container = container;
        this.toggle = container.querySelector(".app-dropdown__toggle");
        this.menu = container.querySelector(".app-dropdown__menu");
        this.showMenuClassName = "app-dropdown--expanded";
        this.appDropdowns = appDropdowns;
        delete container.dataset.module;
    }
    Dropdown.prototype.init = function () {
        this.toggle.addEventListener("click", this.toggleMenu.bind(this));
    };

    Dropdown.prototype.toggleMenu = function (e) {
        e.preventDefault();
        const currentlyExpanded = this.container.classList.contains(this.showMenuClassName)

        this.appDropdowns.forEach((dropdown) => {
            dropdown.classList.remove(this.showMenuClassName)
            dropdown.querySelector('.app-dropdown__toggle').setAttribute('aria-expanded', false)
        })

        if (!currentlyExpanded) {
            this.container.classList.add(this.showMenuClassName);
            this.toggle.setAttribute('aria-expanded', true)
        }
    };


    // Collapse

    function Collapse(container) {
        this.container = container;
        this.button = container.querySelector(".app-collapse__button");
        this.title = container.querySelector(".app-collapse__title");
        this.content = container.querySelector(".app-collapse__content");
        this.radios = container.querySelectorAll(".app-radios__input");
        this.expandedClass = "app-collapse--expanded";
        delete container.dataset.module;
    }

    Collapse.prototype.init = function () {
        this.button.addEventListener("click", this.toggleContent.bind(this));
        if (this.radios.length > 0) {
            this.radios.forEach((radio) => {
                if (radio.checked) {
                    const labelVal = document.querySelector("label[for=" + radio.id + "]");
                    this.title.innerHTML = labelVal.innerHTML;
                }
                radio.addEventListener("change", this.radioChange.bind(this));
            });
        }
    };

    Collapse.prototype.toggleContent = function (e) {
        e.preventDefault();
        e.stopPropagation();
        if (this.container.classList.contains(this.expandedClass)) {
            this.button.setAttribute("aria-expanded", false);
            this.container.classList.remove(this.expandedClass);
        } else {
            this.button.setAttribute("aria-expanded", true);
            this.container.classList.add(this.expandedClass);
        }
    };

    Collapse.prototype.radioChange = function (event) {
        const radio = event.target;
        if (radio.checked) {
            const labelVal = document.querySelector("label[for=" + radio.id + "]");
            this.title.innerHTML = labelVal.innerHTML;
        }
    };


    // Modals 

    function Modal(button, callBack, id, content) {
        const defaultContent = {
            message: "Are you sure you want to remove this article from your saved articles?",
            confirmButton: "Remove article"
        }
        this.callBack = callBack;
        this.id = id;
        this.button = button;
        this.content = { ...defaultContent, ...content };
    }

    Modal.prototype.init = function () {
        this.showModal()
    };

    Modal.prototype.showModal = function () {
        modal = this.createModal()
        modal.classList.add('app-modal--visible')
        modal.querySelector('.app-modal__content').focus()
    }

    Modal.prototype.hideModel = function () {
        this.removeModal()
    }

    Modal.prototype.handleCallBack = function () {
        if (typeof this.callBack === "function") {
            this.callBack(this.id, this.button)
        }
        this.hideModel()
    }

    Modal.prototype.createModal = function () {
        const modal = document.createElement('div');
        const that = this
        modal.classList.add('app-modal')
        modal.id = 'appModal';

        const modalContent = document.createElement('div');
        modalContent.classList.add('app-modal__content')
        modalContent.tabIndex = 0;

        const buttonGroup = document.createElement('div');
        buttonGroup.classList.add('app-button-group')

        const cancelBtn = document.createElement('button');
        cancelBtn.classList.add('app-button', 'app-button--secondary')
        cancelBtn.innerHTML = 'Cancel';
        cancelBtn.addEventListener("click", this.hideModel.bind(this))

        const removeBtn = document.createElement('button');
        removeBtn.classList.add('app-button', 'app-button--warning')
        removeBtn.innerHTML = this.content.confirmButton;
        removeBtn.addEventListener("click", this.handleCallBack.bind(this))

        buttonGroup.appendChild(removeBtn)
        buttonGroup.appendChild(cancelBtn)

        const modalText = document.createElement('p');
        modalText.textContent = this.content.message

        modalContent.appendChild(modalText);
        modalContent.appendChild(buttonGroup);

        modal.appendChild(modalContent);

        document.body.appendChild(modal);
        return modal
    }



    Modal.prototype.removeModal = function () {
        document.getElementById("appModal").remove()
    }


    function trapFocusForOverlay(e, overlayId) {
        e.stopPropagation();
        const isTabPressed = e.key === `Tab` || e.keyCode === 9;
        if (!isTabPressed) {
            return;
        }
        const overlay = document.getElementById(overlayId);
        const focusableElements = `button, [href], input:not([type="hidden"]), select, textarea`;
        const firstFocusableElement = overlay.querySelectorAll(focusableElements)[0];
        const focusableContent = overlay.querySelectorAll(focusableElements);
        const lastFocusableElement = focusableContent[focusableContent.length - 1];

        if (e.shiftKey) {
            if (document.activeElement === firstFocusableElement) {
                lastFocusableElement.focus();
                e.preventDefault();
            }
        } else if (document.activeElement === lastFocusableElement) {
            firstFocusableElement.focus();
            e.preventDefault();
        }
    }

    function initTrapFocus(e, overlayId) {
        return trapFocusForOverlay(e, overlayId);
    }

    const appInit = () => {

        const appOverlays = document.querySelectorAll(`[data-module="app-overlay"]`);

        if (appOverlays) {
            appOverlays.forEach(function (overlay) {
                new Overlay(overlay).init();
            });
        }

        const appDropdowns = document.querySelectorAll(`[data-module="app-dropdown"]`);

        if (appDropdowns) {
            appDropdowns.forEach(function (dropdown) {
                new Dropdown(dropdown, appDropdowns).init();
            });
        }

        const appTabs = document.querySelectorAll(`[data-module="app-tabs"]`);

        if (appTabs) {
            appTabs.forEach(function (tabs) {
                new Tabs(tabs).init();
            });
        }

        const appCollapsable = document.querySelectorAll(
            `[data-module="app-collapse"]`,
        );

        if (appCollapsable) {
            appCollapsable.forEach(function (collapse) {
                new Collapse(collapse).init();
            });
        }
    }

    appInit();

</script>