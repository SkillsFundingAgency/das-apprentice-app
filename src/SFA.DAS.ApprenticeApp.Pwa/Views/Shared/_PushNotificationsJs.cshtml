﻿<script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>


<script type="text/javascript">
   

    //step 3: register the service worker
    let registration = navigator.serviceWorker.register("service-worker.js");
    let thisEndpoint = "";

    //step 4: get subscription if exists
    requestSubscription();

    async function requestSubscription() {
        //add check for referrer
        const worker = await navigator.serviceWorker.getRegistration();
        const existingSubscription = await worker.pushManager.getSubscription();

        if (existingSubscription) {
            thisEndpoint = existingSubscription.endpoint;
            sendSubscriptionToServer(existingSubscription, true);
        }
    }

    async function requestNotificationPermission() {
       await Notification.requestPermission();
        displayNotificationButtons();
    }

    function registerPush(registration) {
        const applicationServerPublicKey = window.pushNotificationKey;
        const applicationServerKey = urlB64ToUint8Array(applicationServerPublicKey);

        return registration.pushManager
            .subscribe({
                userVisibleOnly: true,
                applicationServerKey: applicationServerKey,
            })
            .then((subscription) => {
                thisEndpoint = subscription.endpoint;
                return sendSubscriptionToServer(subscription, false);
            })
            .catch((error) => {
                console.error("Failed to subscribe the user: ", error);
            });
    }

    function sendSubscriptionToServer(subscription, isSubscribed) {
        const requestData = new SubscriptionRequest(
            subscription.endpoint,
            arrayBufferToBase64(subscription.getKey("p256dh")),
            arrayBufferToBase64(subscription.getKey("auth")),
            isSubscribed
        );

        return fetch("/Profile/AddSubscription", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(requestData),
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Error from server while adding subscription.");
                }
                displayNotificationButtons();
            })
            .catch((error) => {
                console.error("Error sending subscription to server:", error);
            });
    }

    async function unsubscribe() {
        const requestData = new RemoveSubscriptionRequest(
            thisEndpoint
        );
        return fetch("/Profile/RemoveSubscription", {
            method: "DELETE",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(requestData),
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Error from server while removing subscription.");
                }
                displayNotificationButtons();
            })
            .catch((error) => {
                console.error("Error sending subscription to server:", error);
            });
    }

    function urlB64ToUint8Array(base64String) {
        const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
        const base64 = (base64String + padding).replace(/-/g, "+").replace(/_/g, "/");

        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);

        for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray;
    }

    function arrayBufferToBase64(buffer) {
        // https://stackoverflow.com/a/9458996
        let binary = "";
        let bytes = new Uint8Array(buffer);
        let len = bytes.byteLength;
        for (let i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }

    class SubscriptionRequest {
        constructor(endpoint, publicKey, authenticationsecret, issubscribed) {
            this.endpoint = endpoint;
            this.publicKey = publicKey;
            this.authenticationsecret = authenticationsecret;
            this.issubscribed = issubscribed;
        }
    }

    class RemoveSubscriptionRequest {
        constructor(endpoint) {
            this.endpoint = endpoint;
        }
    }

    async function handlePermissionChange(permission) {
        if (permission === "granted") {
            console.log("Notifications changed to enabled by the user.");
            const worker = await navigator.serviceWorker.getRegistration();
            if (!worker) {
                requestNotificationPermission();
            } else {
                registerPush(worker);
            }
        } else if (permission === "denied") {
            console.log("Notifications changed to disabled by the user.");
            unsubscribe();
        }
    }

    document.addEventListener("DOMContentLoaded", (event) => {
        navigator.permissions
            .query({ name: "notifications" })
            .then((permissionStatus) => {
                permissionStatus.onchange = () => {
                    handlePermissionChange(permissionStatus.state);
                };
            });
    });

    function testNotification() {
        const body = "You have successfully subscribed to notifications!"
        const icon = 'govuk-icon-512.png'
        const options = {
            body: body,
            icon: icon,
        };
        new Notification("Test Notification", options);
    }
</script>