@using SFA.DAS.ApprenticePortal.SharedUi.GoogleAnalytics

<!DOCTYPE html>
<html lang="en" class="govuk-template">

<head>
    <partial name="_GoogleAnalytics" model="GoogleAnalyticsTag.Head" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#f7f7f7" />
    <meta name="clarity-site-verification" content="ec87324f-d5ed-4a81-a723-dd5179c531eb" />
    <title>@(ViewData["Title"] == null ? "Apprentice App" : ViewData["Title"])</title>
    <link rel="icon" sizes="48x48" href="/assets/images/favicon.ico" />
    <link rel="apple-touch-icon" href="/assets/images/apple-touch-icon.png" />
    <link rel="stylesheet" href="~/css/app.css" asp-append-version="true" />
    <link rel="manifest" href="~/manifest.json" />
</head>

<body class="govuk-template__body app-template__body" id="top">

    <partial name="_GoogleAnalytics" model="GoogleAnalyticsTag.Head" />
    <script>document.body.className += ' js-enabled' + ('noModule' in HTMLScriptElement.prototype ? ' govuk-frontend-supported' : '');</script>
    <div class="app-container">
        <main class="app-main">
            <div class="app-main__inner">
                @RenderBody()
                <p id="fontSizeHelper" style="visibility:hidden;" aria-hidden="true">
                    Your apprenticeship - A platform for apprentices to manage tasks, track KSBs, and access helpful
                    support articles.
                </p>
            </div>
        </main>
        <nav class="app-navigation">
            <a asp-controller="Tasks" asp-action="Index"
                class="app-navigation__link  @(ViewBag.Section == "Tasks" ? "app-navigation__link--active" :"")">
                <span class="app-navigation__icon">
                    <svg>
                        <use xlink:href="/assets/images/icons.svg#tasks@(ViewBag.Section == "Tasks" ? "Active" : "")">
                        </use>
                    </svg>
                </span>
                <span class="app-navigation__link-text">Tasks</span>
            </a>
            <a asp-controller="Ksb" asp-action="Index"
                class="app-navigation__link @(ViewBag.Section == "Ksbs" ? "app-navigation__link--active" :"")">
                <span class="app-navigation__icon">
                    <svg>
                        <use xlink:href="/assets/images/icons.svg#ksbs@(ViewBag.Section == "Ksbs" ? "Active" : "")">
                        </use>
                    </svg>
                </span>
                <span class="app-navigation__link-text">KSBs</span>
            </a>
            <a asp-controller="Support" asp-action="Index"
                class="app-navigation__link @(ViewBag.Section == "Support" ? "app-navigation__link--active" :"")">
                <span class="app-navigation__icon">
                    <svg>
                        <use
                            xlink:href="/assets/images/icons.svg#support@(ViewBag.Section == "Support" ? "Active" : "")">
                        </use>
                    </svg>
                </span>
                <span class="app-navigation__link-text">Support</span>
            </a>
            <a asp-controller="Notifications" asp-action="Index"
                class="app-navigation__link @(ViewBag.Section == "Notifications" ? "app-navigation__link--active" :"")">
                <span class="app-navigation__icon">
                    <svg>
                        <use
                            xlink:href="/assets/images/icons.svg#notifications@(ViewBag.Section == "Notifications" ? "Active" : "")">
                        </use>
                    </svg>
                </span>
                @await Component.InvokeAsync("NotificationCounter")
                <span class="app-navigation__link-text">Notifications</span>
            </a>
            <a asp-controller="Account" asp-action="YourAccount"
                class="app-navigation__link @(ViewBag.Section == "Account" ? "app-navigation__link--active" :"")">
                <span class="app-navigation__icon">
                    <svg>
                        <use
                            xlink:href="/assets/images/icons.svg#account@(ViewBag.Section == "Account" ? "Active" : "")">
                        </use>
                    </svg>
                </span>
                <span class="app-navigation__link-text">Account</span>
            </a>
        </nav>
    </div>

    <script type="module" src="/js/libs/govuk-frontend.min.js"></script>
    <script type="module">import {
            initAll
        } from '/js/libs/govuk-frontend.min.js'
        initAll()</script>
    @await Html.PartialAsync("_FrontendJs.cshtml")
    <script src="/js/sessionTimeout.js"></script>
    <script>
        const getFontSizeClass = (fontSizePercentage) => {
            if (fontSizePercentage < 125) {
                return "app-font-size--regular";
            } else if (fontSizePercentage <= 150) {
                return "app-font-size--medium";
            } else if (fontSizePercentage <= 175) {
                return "app-font-size--large";
            } else if (fontSizePercentage < 200) {
                return "app-font-size--largest";
            } else {
                return "app-font-size--xl";
            }
        }
        const calculateFontSize = () => {

            const element = document.getElementById("fontSizeHelper")
            const style = window.getComputedStyle(element, null).getPropertyValue('font-size');
            const fontSizePercentage = parseFloat(style) / 16 * 100;
            element.remove();
            const root = document.getElementsByTagName('html')[0];
            root.classList.add(getFontSizeClass(fontSizePercentage));
        };
        window.onload = calculateFontSize;
        
    </script>




    <script>
        // Text size settings
        const minSize = 0.8;   // 80% of original size
        const maxSize = 1.5;   // 150% of original size
        const step = 0.1;      // Size change per click
        let textSize = 1.0;    // Default size (100%)

        // DOM elements - may be null on some pages
        const decreaseBtn = document.getElementById('textSizeDecrease');
        const increaseBtn = document.getElementById('textSizeIncrease');
        const sizeDisplay = document.getElementById('textSizeDisplay');
        const htmlElement = document.documentElement;

        // Function to set text size for the whole site
        function setTextSize(size) {
            // Clamp the size between min and max
            size = Math.max(minSize, Math.min(size, maxSize));
            textSize = size;

            // Set the font size on the root element (affects all REM units)
            htmlElement.style.fontSize = (size * 100) + '%';

            // Update the display if element exists
            if (sizeDisplay) {
                sizeDisplay.textContent = Math.round(size * 100) + '%';
            }

            // Save the preference to a cookie
            const expiryDate = new Date();
            expiryDate.setFullYear(expiryDate.getFullYear() + 10); // 10 year expiry
            document.cookie = `SFA.ApprenticeApp.TextSize=${size}; expires=${expiryDate.toUTCString()}; path=/`;

            console.log(`Text size set to: ${Math.round(size * 100)}%`);
        }

        // Function to get saved text size from cookie
        function getSavedTextSize() {
            const name = 'SFA.ApprenticeApp.TextSize=';
            const cookies = document.cookie.split(';');

            for (let i = 0; i < cookies.length; i++) {
                let cookie = cookies[i].trim();
                if (cookie.indexOf(name) === 0) {
                    const sizeValue = parseFloat(cookie.substring(name.length));
                    if (!isNaN(sizeValue)) {
                        return Math.max(minSize, Math.min(maxSize, sizeValue));
                    }
                }
            }
            return textSize; // Return default if not found
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', () => {
            // Apply saved size immediately
            textSize = getSavedTextSize();
            setTextSize(textSize);

            console.log("DOM fully loaded and parsed");
            console.log(`Decrease button: ${decreaseBtn ? "Found" : "Not found"}`);
            console.log(`Increase button: ${increaseBtn ? "Found" : "Not found"}`);
            console.log(`Size display: ${sizeDisplay ? "Found" : "Not found"}`);

            // Only attach event listeners if elements exist
            if (decreaseBtn) {
                decreaseBtn.addEventListener('click', () => {
                    setTextSize(textSize - step);
                });

                // Keyboard support for decrease button
                decreaseBtn.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter' || e.key === ' ') {
                        setTextSize(textSize - step);
                    }
                });
            }

            if (increaseBtn) {
                increaseBtn.addEventListener('click', () => {
                    setTextSize(textSize + step);
                });

                // Keyboard support for increase button
                increaseBtn.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter' || e.key === ' ') {
                        setTextSize(textSize + step);
                    }
                });
            }
        });
    </script>
    
    
    </body>

</html>