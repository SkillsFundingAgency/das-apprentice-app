@model SFA.DAS.ApprenticeApp.Pwa.ViewModels.TaskViewModelBase

<script src="https://code.jquery.com/jquery-3.7.1.min.js"
    integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

<script type="text/javascript">
    $(document).ready(function () {

        const resetErrorMessages = () => {
            const errorElements = document.querySelectorAll('.govuk-error-message');
            errorElements.forEach((errorElement) => {
                errorElement.innerHTML = '';
            });
            const inputElements = document.querySelectorAll('.app-input');
            inputElements.forEach((inputElement) => {
                inputElement.classList.remove('app-input--error');
            });
        }

        const populateErrorMessages = (validationErrors) => {
            validationErrors.forEach((error) => {
                const errorElement = document.getElementById(`${error.elementId}-error`);
                errorElement.innerHTML = error.text;
                document.getElementById(`${error.elementId}`).classList.add('app-input--error');
            });
        }

        const showErrorSummary = (validationErrors) => {
            const errorSummary = document.getElementById('errorSummary');
            const errorSummaryList = errorSummary.querySelector('.govuk-error-summary__list');
            errorSummaryList.innerHTML = '';

            validationErrors.forEach((error) => {
                const errorSummaryItem = document.createElement('li');
                errorSummaryItem.innerHTML = `<a href="#${error.elementId}">${error.text}</a>`;
                errorSummaryList.appendChild(errorSummaryItem);
            });

            errorSummary.classList.remove('govuk-visually-hidden');
            errorSummary.tabIndex = 0;
            errorSummary.ariaHidden = false;
            errorSummary.ariaLive = 'polite';
            errorSummary.focus();
        }

        let submittedTaskForm = false
        
        $(".add-task").on("click", function (e) {

            const validationErrors = [];

                if($("#Task_Title").val().length > 150) {
                    validationErrors.push({
                        elementId: "Task_Title",
                        text: "Name of the task must be 150 characters or less"
                    });
        }

            if ($("#Task_Title").val().length === 0) {
            validationErrors.push({
                elementId: "Task_Title",
                text: "Enter the name of the task"
            });
        }

        if ($("#note").val().length > 1000) {
            validationErrors.push({
                elementId: "note",
                text: "Note must be 1000 characters or less"
            });
        }

        if ($("#date").val() == "") {
            validationErrors.push({
                elementId: "date",
                text: "Enter date the task @(Model.StatusId == 1 ? "was completed" : "is due")"
            });
        }

        if ($("#date").val() !== "" && !isValidDate($("#date").val())) {
            validationErrors.push({
                elementId: "date",
                text: "Date the task @(Model.StatusId == 1 ? "was completed" : "is due") must be a real date"
            });
        }

        if ($("#time").val() == "") {
            validationErrors.push({
                elementId: "time",
                text: "Enter time the task @(Model.StatusId == 1 ? "was completed" : "is due")"
            });
        }

        if (validationErrors.length > 0) {
            resetErrorMessages();
            populateErrorMessages(validationErrors);
            showErrorSummary(validationErrors)

        } else {
            if (submittedTaskForm) {
                return;
            }
           $("form").submit();
           submittedTaskForm = true
        }

    });

    function isValidDate(d) {
        return !isNaN((new Date(d)).getTime());
    }

    $("#ksb-popup-btn").click(function (e) {
        e.preventDefault();
        const $ksbOverlay = $("#ksb-popup");
        $ksbOverlay.load('@Url.Action("LinkKsbs", "Ksb")', function () {
            $ksbOverlay.css({ top: "-10px", display: "flex" });
            const ksbIdList = $('#linked-ksb-ids').val();
            $('.link-ksb-checkbox').each(function () {
                var ksbId = $(this).val();
                if (ksbIdList.includes(ksbId)) { $(this).prop('checked', true) }
            });
            document.addEventListener(`keydown`, (e) => initTrapFocus(e, 'ksb-popup'));
            $ksbOverlay.focus()
        });
    });

    $('body').on('click', '.ksb-item-edit', function (e) {
        e.preventDefault();
        const $ksbOverlay = $("#ksb-popup");
        $ksbOverlay.load('@Url.Action("LinkKsbs", "Ksb")', function () {
            $ksbOverlay.css({ top: "-10px", display: "flex" });
            const ksbIdList = $('#linked-ksb-ids').val();
            $('.link-ksb-checkbox').each(function () {
                var ksbId = $(this).val();
                if (ksbIdList.includes(ksbId)) { $(this).prop('checked', true) }
            });
            document.addEventListener(`keydown`, (e) => initTrapFocus(e, 'ksb-popup'));
            $ksbOverlay.focus()
        });

    });

    $('body').on('click', '.edit-ksb', function (e) {
        if ($("#ksb-popup").html().length > 0) {
            $('#ksb-popup').show();
        }
        else {
            $('#ksb-popup').load('@Url.Action("LinkKsbs", "Ksb")', function () {
                $('#ksb-popup').show();

               // $('.add-edit-content-area').height($('.app-container').height() - 150);
            });
            document.addEventListener(`keydown`, (e) => initTrapFocus(e, 'ksb-popup'));
            $ksbOverlay.focus()
        }
        $("html, body").animate({ scrollTop: 0 }, "slow");
    });

    $('body').on('click', '.ksb-popup-cancel', function (e) {
        $('#ksb-popup').hide();
        $('#ksb-popup-btn').focus();
    });

    $('body').on('click', '.link-ksb-checkbox', function (e) {
        var value = $(this).attr("value");
        var ksbKey = $(this).attr("data-title");
        var ksbType = $(this).attr("data-type");
        var status = $(`#app-collapse-contents-status-${value}`).find('.ksb-status-radio:checked').val();
        var note = $(this).attr("data-note");

        $.ajax({
            type: "POST",
            url: '@Url.Action("EditKsbProgress", "Ksb")',
            data: { ksbId: value, ksbKey: ksbKey, ksbType: ksbType, ksbStatus: status, note: note },
            dataType: "json"
        });
    });

    $('body').on('click', '.ksb-status-radio', function (e) {
        var value = $(this).attr("value");
        var ksbId = $(this).attr("data-id");
        var ksbKey = $(this).attr("data-key");
        var ksbType = $(this).attr("data-type");
        var note = $(this).attr("data-note");

        $.ajax({
            type: "POST",
            url: '@Url.Action("EditKsbProgress", "Ksb")',
            data: { ksbId: ksbId, ksbKey: ksbKey, ksbType: ksbType, ksbStatus: value, note: note },
            dataType: "json"
        });
    });

    $('body').on('click', '.ksb-item-removeLink', function (e) {
        e.preventDefault()
        const currentKsbIds = $('#linked-ksb-ids').val().split(',');
        const filteredKsbIds = currentKsbIds.filter(id => id !== $(this).data('id'));
        $('#linked-ksb-ids').val(filteredKsbIds)
        $(`#ksb-item-${$(this).data('id')}`).slideUp(function () {
            $(this).remove();
        });
    });

    $('body').on('click', '.link-ksb-confirm', function (e) {

        var checkboxes = $(".link-ksb-checkbox:checked")

        var result = checkboxes.map(function (i, e) {
            return $(e).attr("value");
        }).get();

        $("#linked-ksb-ids").val(result);
                
        var text = checkboxes.map(function (i, e) {
        var ksbstatus = $(`#ksb-status-${$(e).attr('value')}`).text().trim();
            
            return `<div class="app-card ksb-item" id="ksb-item-${$(e).attr("value")}">
                            <div class="app-card__header">
                                <h2 class="app-card__heading">${$(e).attr("data-title")}</h2>
                            </div>
                            <p>${$(e).attr("data-desc")}</p>
                            <div class="ksb-status-display app-tag app-tag--status-${(ksbstatus).replaceAll(" ", "").toLowerCase()}">${(ksbstatus)}</div>
                            <hr class="app-separator" />
                            <div class="app-dropdown" data-module="app-dropdown">
                                <button class="app-dropdown__toggle" aria-expanded="false">View actions<span class="govuk-visually-hidden"> for ${$(e).attr("data-title")}</span>
                                </button>
                                <div class="app-dropdown__menu">
                                    <ul class="app-dropdown__menu-list">
                                        <li>
                                            <a class="app-dropdown__menu-link ksb-item-edit" href="#">
                                                <span class="app-dropdown__menu-icon">
                                                    <svg>
                                                        <use xlink:href="/assets/images/icons.svg#edit"></use>
                                                    </svg>
                                                </span>
                                                <span>Edit</span>
                                            </a>
                                        </li>
                                        <li>
                                            <a class="app-dropdown__menu-link ksb-item-removeLink" href="#" data-id="${$(e).attr("value")}">
                                                <span class="app-dropdown__menu-icon">
                                                    <svg>
                                                        <use xlink:href="/assets/images/icons.svg#unlink"></use>
                                                    </svg>
                                                </span>
                                                <span>Remove link to this KSB</span>
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>`;
        }).get();

        $("#linked-ksb-details").html(text);
        $('#ksb-popup').hide();
        $('#ksb-popup-btn').focus();
        appInit();
    });

    $('body').on('click', '.edit-linkedksb', function (e) {
        $('.app-dropdown__menu').hide();
        var value = $(this).attr("value");
        $.ajax({
            type: "GET",
            url: '@Url.Action("AddUpdateKsbProgress", "Ksb")',
            data: { id: value },
            dataType: "json"
        });
    });

    $(".edit-linkedksb").click(function (e) {
        if ($("#ksb-edit-popup").html().length > 0) {
            $('#ksb-edit-popup').html() = "";
        }
        else {
            $("ksb-edit-popup")
            $('#ksb-edit-popup').load('@Url.Action("AddUpdateKsbProgress", "Ksb")', function () {

                $('#ksb-edit-popup').show();
                //$('.add-edit-content-area').height($('.app-container').height() - 150);

            });
        }
        $("html, body").animate({ scrollTop: 0 }, "slow");
    });

    });


    const reminderChooseRadio = document.getElementById('ReminderChoose');

    if (reminderChooseRadio) {

        const reminderDateTime = document.getElementById('reminder-date-time');
        const reminderCancel = document.getElementById('reminder-cancel');
        const reminderConfirm = document.getElementById('reminder-save');
        const dueDate = document.getElementById('date');
        const dueTime = document.getElementById('time');

        const reminderLength = document.getElementById('reminder-length');
        const reminderUnit = document.getElementById('reminder-unit');
        const reminderTime = document.getElementById('reminder-time');

        dueDate.addEventListener('change', function () {
            checkAndCalculateIfCustomReminder();
        });

        dueTime.addEventListener('change', function () {
            checkAndCalculateIfCustomReminder();
        });

        reminderChooseRadio.addEventListener('click', function () {
            showReminderChoose();
        });

        reminderConfirm.addEventListener('click', function (e) {
            e.preventDefault();
            if (!isValidReminderForm()) {
                return;
            }
            checkAndCalculateIfCustomReminder();
            hideReminderChoose();
        });

        const isDueDateTimeValid = function () {
            const dueDateTime = new Date(`${dueDate.value}T${dueTime.value}`);
            return !isNaN(dueDateTime.getTime());
        }

        const isValidReminderForm = function () {
            const isReminderLengthValid = isPositiveInteger(reminderLength.value * 1);
            const isTimeValid = /^([0-1]?[0-9]|2[0-4]):([0-5][0-9])(:[0-5][0-9])?$/.test(reminderTime.value);
            return isReminderLengthValid && isTimeValid;
        }

        const isPositiveInteger = function (x) {
            return Number.isInteger(x) && x > 0
        }

        const checkAndCalculateIfCustomReminder = function () {
            if (!reminderChooseRadio.checked) {
                return false;
            }
            if (!isDueDateTimeValid()) {
                reminderChooseRadio.value = 0;
                return false;
            }
            const dueDateTime = new Date(`${dueDate.value}T${dueTime.value}`);
            const reminderDays = reminderUnit.value === 'day' ? reminderLength.value : reminderLength.value * 7;
            const reminderDate = new Date(dueDateTime.getTime() - reminderDays * 24 * 60 * 60 * 1000);
            const reminderDateTime = new Date(reminderDate.getFullYear(), reminderDate.getMonth(), reminderDate.getDate(), reminderTime.value.split(':')[0], reminderTime.value.split(':')[1], 0, 0);
            const customReminderInMinutes = calculateDifferenceInMinutes(dueDateTime, reminderDateTime);
            reminderChooseRadio.value = isNaN(customReminderInMinutes) ? 0 : customReminderInMinutes;
            console.log(customReminderInMinutes);
        };

        const calculateDifferenceInMinutes = function (date1, date2) {
            const diff = Math.abs(date1 - date2);
            return Math.floor((diff / 1000) / 60);
        };

        reminderCancel.addEventListener('click', function () {
            hideReminderChoose();
        });

        const showReminderChoose = function () {
            reminderDateTime.classList.add('app-modal--visible');
        };

        const hideReminderChoose = function () {
            reminderDateTime.classList.remove('app-modal--visible');
        };

    }

</script>