<script src="https://code.jquery.com/jquery-3.7.1.min.js"
    integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

<script type="text/javascript">
    $(document).ready(function () {

        $('#tasks-todo__tasks').load('@Url.Action("ToDoTasks", "Tasks")', function () {
            $('#tasks-done__tasks').load('@Url.Action("DoneTasks", "Tasks")');
        });

        $('body').on('click', '.todo', function (e) {

            setFilterTags("todo");

            $('.reminder-filter').show();
        });

        $('body').on('click', '.done', function (e) {

            setFilterTags("done");

            $('.reminder-filter').hide();
        });


        $(".post-form").click(function (e) {
            $(".form").submit();
        });

        const deleteTask = (taskId) => {
            console.log(taskId)
            $.ajax({
                type: "DELETE",
                url: '@Url.Action("DeleteApprenticeTask", "Tasks")',
                data: { taskId: taskId },
                complete: function () {
                    $('#task-' + taskId).slideUp("slow", function () { $(this).remove(); checkTaskCount(); });
                },
                dataType: "json"
            });
        }

        $('body').on('click', '.delete-task', function (e) {
            const modalContent = {
                message: 'Are you sure you want to delete this task?',
                confirmButton: 'Delete task'
            }
            const taskId = $(this).siblings('.taskId').val();
            const modal = new Modal(this, deleteTask, taskId, modalContent).init();
        });

        $('body').on('click', '.share-link', function (e) {
            if (navigator.share) {
                navigator.share({
                    title: $(this).siblings('.share-title').val(),
                    text: $(this).siblings('.share-note').val()
                })
                    .then(() => console.log('Shared successfully'))
                    .catch((error) => console.error('Sharing failed:', error));
            }
        });

        $('body').on('click', '.move-done', function (e) {
            e.preventDefault();
            var taskId = $(this).siblings('.taskId').val();
            $(this).closest('.app-card').slideUp("slow", function () { $(this).remove(); checkTaskCount(); });

            $.ajax({
                type: "GET",
                url: '@Url.Action("ChangeTaskStatus", "Tasks")',
                data: { taskId: taskId, statusId: 1 },
                dataType: "json",
                complete: () => { $('#tasks-done__tasks').load('@Url.Action("DoneTasks", "Tasks")'); }
            });

            return false;
        });

        $('body').on('click', '.move-todo', function (e) {
            e.preventDefault();
            var taskId = $(this).siblings('.taskId').val();
            $(this).closest('.app-card').slideUp("slow", function () { $(this).remove(); checkTaskCount(); });

            $.ajax({
                type: "GET",
                url: '@Url.Action("ChangeTaskStatus", "Tasks")',
                data: { taskId: taskId, statusId: 0 },
                dataType: "json",
                complete: () => { $('#tasks-todo__tasks').load('@Url.Action("ToDoTasks", "Tasks")'); }
            });

            return false;
        });

        function checkTaskCount() {
            const urlParams = new URLSearchParams(window.location.search);
            const activeStatus = urlParams.get('status');
            const tabName = activeStatus === '1' ? 'done' : 'todo';
            const tab = $(`#tasks-${tabName}__tasks`);
            const noOfCards = tab.find('.app-card').length;
            if (noOfCards === 0) {
                tab.load('@Url.Action("TasksNotStarted", "Tasks")')
            }
        }


        function setFilterTags(tabName) {

            if (tabName != null && tabName != "") {

                var filters = "";

                if (tabName == "todo") {
                    filters = getCookieContents("SFA.ApprenticeApp.TaskFiltersTodo");
                }
                else {
                    filters = getCookieContents("SFA.ApprenticeApp.TaskFiltersDone");
                }


                if (typeof filters !== "undefined") {

                    data = filters.split('&');

                    $("#filters-set-tasks").text("");
                    $("input:checkbox").prop('checked', false);

                    for (var k in data) {

                        var line = data[k].split('=');

                        $("#" + line[1]).prop('checked', true);

                        if (line[1] != null) {
                            $("#filters-set-tasks").append("<div class='app-tag app-tag--filter'><span>" + line[1] + "</span> <a class='app-tag__action app-tag__action--remove remove-filter' data-id='" + line[1] + "'><span class='govuk-visually-hidden'>Remove " + line[1] + " from your filters</span></a></div>");
                        }
                    }
                }
                else {
                    $("#filters-set-tasks").text("");
                    $("input:checkbox").prop('checked', false);
                }
            }

        }

        function getCookieContents(name) {
            let matches = document.cookie.match(new RegExp(
                "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
            ));
            return matches ? decodeURIComponent(matches[1]) : undefined;
        }

        $(".add-btn").click(function (e) {
            var status = $(this).attr("data-status-id");
            var addUrl = '@Url.Action("Add", "Tasks")?status=' + status;

            $('#add-edit-wrapper').show();
            $('#add-edit-wrapper').load(addUrl, function () {
                $("html, body").animate({ scrollTop: 0 }, "slow");
                $('.add-edit-content-area').height($('.app-container').height() - 100);
                document.addEventListener(`keydown`, (e) => initTrapFocus(e, 'add-edit-wrapper'));
            });
        });

        $('body').on('click', '.edit-btn', function (e) {
            $('#add-edit-wrapper').show();
            var taskId = $(this).attr("data-id");
            var status = $(this).attr("data-status") || 0;
            var editUrl = '@Url.Action("Edit", "Tasks")/' + taskId + '?status=' + status;

            $('#add-edit-wrapper').load(editUrl, function () {
                $("html, body").animate({ scrollTop: 0 }, "slow");
                $('.add-edit-content-area').height($('.app-container').height() - 100);
                $('#add-edit-wrapper').focus()
                document.addEventListener(`keydown`, (e) => initTrapFocus(e, 'add-edit-wrapper'));
            });

        });

        $('body').on('click', '.post-form', function (e) {
            $(".form").submit();
        });

        $('body').on('click', '.todo', function (e) {
            setQueryStringParameter("status", "0");
            $('.recently-added-menu-item').prop('href', '?sort=recently_added&status=0');
            $('.due-date-menu-item').prop('href', '?sort=date_due&status=0');
        });

        $('body').on('click', '.done', function (e) {
            setQueryStringParameter("status", "1");
            $('.recently-added-menu-item').prop('href', '?sort=recently_added&status=1');
            $('.due-date-menu-item').prop('href', '?sort=date_due&status=1');
        });

        $(document).ready(function () {
            var statusId = getUrlParameter('status');
            if (statusId != false) {
                $('.recently-added-menu-item').prop('href', '?sort=recently_added&status=' + statusId + '');
                $('.due-date-menu-item').prop('href', '?sort=date_due&status=' + statusId + '');
            }
        });

        function setQueryStringParameter(name, value) {
            const params = new URLSearchParams(window.location.search);
            params.set(name, value);
            window.history.replaceState({}, "", decodeURIComponent(`${window.location.pathname}?${params}`));
        }

        var getUrlParameter = function getUrlParameter(sParam) {
            var sPageURL = window.location.search.substring(1),
                sURLVariables = sPageURL.split('&'),
                sParameterName,
                i;

            for (i = 0; i < sURLVariables.length; i++) {
                sParameterName = sURLVariables[i].split('=');

                if (sParameterName[0] === sParam) {
                    return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
                }
            }
            return false;
        };
    });



    //pushnotification setup
    const checkUICompatibility = () => {
        if (!("serviceWorker" in navigator)) {
            console.log("Service worker not supported");
            throw new Error("Service worker not supported");
        }

        if (!("Notification" in window)) {
            console.log("Notification not supported");
            throw new Error("Notification not supported");
        }
    };

    const displayNotificationButtons = () => {
        const enableNotificationsButtons = document.querySelectorAll(
            ".enable-notifications"
        );

        for (const element of enableNotificationsButtons) {
            if (Notification.permission === "default") {
                element.classList.add("app-modal--visible");
            } else {
                element.classList.remove("app-modal--visible");
            }
        }
    };

    //step 1: check if the browser supports service workers and notifications
    checkUICompatibility();

    //step 2: manage ui elements based on existing permission status
    displayNotificationButtons();
</script>